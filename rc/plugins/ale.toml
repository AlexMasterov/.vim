[[plugins]]
repo = 'w0rp/ale'
on_func = 'ale#'
hook_add = '''
nmap <silent> <Right> <Plug>(ale_next_wrap)
nmap <silent> <Left>  <Plug>(ale_previous_wrap)

Autocmd ColorScheme *
  \  hi ALEErrorSign   guifg=#2B2B2B guibg=#FFC08E gui=bold
  \| hi ALEWarningSign guifg=#2B2B2B guibg=#F2E8DF gui=bold
  \| hi ALEErrorLine   guifg=#2B2B2B guibg=#F2E8DF gui=NONE
  \| hi ALEWarningLine guifg=#2B2B2B guibg=#F2E8DF gui=NONE

Autocmd BufNewFile,BufWrite,BufEnter,WinEnter,TextChangedI
  \ *.{js,ts,rs,php,go,md}
  \ call ale#Queue(0, 'lint_file')
'''
hook_source = '''
let g:ale_echo_cursor = 1
let g:ale_lint_on_save = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 0
let g:ale_history_enabled = 0
let g:ale_history_log_output = 0
let g:ale_set_signs = 0
let g:ale_sign_column_always = 0
let g:ale_sign_error = '->'
let g:ale_sign_warning = 'â€”'
let g:ale_echo_msg_format = ' %s'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'

let g:ale_linters = {
  \ 'javascript': ['jslint'],
  \ 'typescript': [],
  \ 'rust': ['rustc'],
  \ 'php': ['php'],
  \ 'go': ['gofmt'],
  \ 'markdown': ['jslint-md'],
  \ }

let g:ale_linter_aliases = {
  \ 'markdown': ['javascript'],
  \ }

" JavaScript
function! s:eslint(name, ...) abort
  let cmd = 'eslint --no-eslintrc --config '
  \ . expand('$CODING_STYLE_PATH/javascript/eslint-fix.js')
  \ . (a:0 > 0 ? ' ' . a:1 : '')
  \ . ' --no-color -f unix --stdin --stdin-filename %s'
  return {
    \ 'name': a:name,
    \ 'executable': 'eslint',
    \ 'command': cmd,
    \ 'callback': 'ale#handlers#eslint#Handle',
    \ }
endfunction

call ale#linter#Define('javascript', s:eslint('jslint'))
call ale#linter#Define('javascript', s:eslint('jslint-md', '--plugin markdown'))

" Golang
if executable('revive')
  let g:ale_linters['go'] = ['revive']
  call ale#linter#Define('go', {
    \ 'name': 'revive',
    \ 'output_stream': 'both',
    \ 'executable': 'revive',
    \ 'read_buffer': 0,
    \ 'command': 'revive %t',
    \ 'callback': 'ale#handlers#unix#HandleAsWarning',
    \ })
endif
'''
