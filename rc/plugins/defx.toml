[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_done_update = '''
if executable('pip3')
  call system('pip3 install -q --upgrade Send2Trash')
endif
'''
hook_add = '''
function! DefxResize(ctx) abort
  let line_width = max(map(getline(2, '$'), 'len(trim(v:val))')) + 5
  if line_width !=# a:ctx.winwidth
    call defx#call_action('resize', line_width)
  endif
endfunction

function! s:jump_to_defx() abort
  for winnr in range(1, winnr('$'))
    if getwinvar(winnr, '&filetype') ==# 'defx'
      let prev_winid = win_getid()
      call win_gotoid(win_getid(winnr))
      let b:prev_winid = prev_winid
      return
    endif
  endfor

  Defx -listed -resume
  call DefxResize(defx#get_context())
endfunction

nnoremap <silent> ;d    :<C-u>Defx -listed -resume -split=no<CR>
nnoremap <silent> ;D    :<C-u>call <SID>jump_to_defx()<CR>
nnoremap <silent> <Tab> :<C-u>call <SID>jump_to_defx()<CR>
'''
hook_source = '''
call defx#custom#option('_', {
  \ 'winwidth': 18,
  \ 'split': 'vertical',
  \ 'direction': 'topleft',
  \ 'root_marker': ':',
  \ 'show_ignored_files': v:false,
  \ 'session_file': expand($VIMHOME . '/defx_session'),
  \ 'ignored_files': join([
  \   '.*',
  \   'LICENSE',
  \   'dist/',
  \   'build/',
  \   'node_modules/',
  \ ], ',')
  \ })

call defx#custom#column('mark', {
  \ 'length': 0,
  \ })

call defx#custom#column('filename', {
  \ 'root_marker_highlight': 'Ignore',
  \ 'min_width': 30,
  \ 'max_width': 38,
  \ })

call defx#custom#option('_', 'drives', [
 \ expand('~/vimfiles'),
 \ expand('~'),
 \ ])

Autocmd BufWritePost * call defx#redraw()
'''

[plugins.ftplugin]
defx = '''
let s:ignore_filtypes = ['defx']

function! s:is_ignore_window(winnr) abort
  return index(s:ignore_filtypes, getbufvar(winbufnr(a:winnr), "&filetype")) > -1
endfunction

function! DefxOpen(ctx) abort
  if tabpagewinnr(tabpagenr(), '$') < 3
    return defx#call_action('drop')
  endif

  let winnrs = filter(range(1, winnr('$')), '!s:is_ignore_window(v:val)')
  let choice = choosewin#start(winnrs, {
    \ 'noop': 1,
    \ 'auto_choose': 1,
    \ 'hook_enable': 0,
    \ })

  if !empty(choice)
    let [_, winnr] = choice
    call win_gotoid(win_getid(winnr))
    execute 'edit!' a:ctx.targets[0]
  endif
endfunction

setlocal cursorline
setlocal statusline=\ "

let s:NOOP = [
  \ 's', 'S',
  \ 'v', 'V',
  \ 'Q', 'E', '-', '<BS>', '<CR>',
  \ '<Space>', '<Space>i', '<Space>v', '<Space>V',
  \ ]

for key in s:NOOP
  execute 'nnoremap <buffer> ' . key . ' <Nop>'
endfor

nnoremap <silent> <buffer> <expr> j line('.') ==# line('$') ? 'gg' : 'j'
nnoremap <silent> <buffer> <expr> k line('.') ==# 1 ? 'G' : 'k'
nnoremap <silent> <buffer> <expr> l defx#async_action('multi', ['open_tree', ['call', 'DefxResize']])
nnoremap <silent> <buffer> <expr> h defx#async_action('multi', ['close_tree', ['call', 'DefxResize']])

nnoremap <silent> <buffer> <expr> a defx#do_action('add_session')
nnoremap <silent> <buffer> <expr> R defx#do_action('redraw')
nnoremap <silent> <buffer> <expr> y defx#do_action('yank_path')
nnoremap <silent> <buffer> <expr> d defx#async_action('remove_trash')
nnoremap <silent> <buffer> <expr> D defx#async_action('remove')
nnoremap <silent> <buffer> <expr> r defx#async_action('rename')
nnoremap <silent> <buffer> <expr> m defx#async_action('move')
nnoremap <silent> <buffer> <expr> c defx#async_action('copy')
nnoremap <silent> <buffer> <expr> p defx#async_action('paste')

nnoremap <silent> <buffer> <expr> n defx#async_action('new_file')
nnoremap <silent> <buffer> <expr> N defx#async_action('new_directory')
nnoremap <silent> <buffer> <expr> M defx#async_action('new_multiple_files')

nnoremap <silent> <buffer> <expr> . defx#do_action('toggle_ignored_files')
nnoremap <silent> <buffer> <expr> e defx#do_action('toggle_select')
nnoremap <silent> <buffer> <expr> E defx#do_action('toggle_select') . 'j'
nnoremap <silent> <buffer> <expr> A defx#do_action('toggle_select_all')
nnoremap <silent> <buffer> <expr> t defx#async_action('toggle_sort', 'Time')

nnoremap <silent> <buffer> <expr> ! defx#async_action('execute_command')
nnoremap <silent> <buffer> <expr> @ defx#async_action('execute_system')

nnoremap <silent> <buffer> <expr> q defx#do_action('quit')
nnoremap <silent> <buffer> <expr> Q defx#do_action('multi', ['drop', 'quit'])

nnoremap <silent> <buffer> <expr> o
  \ defx#is_directory()
  \   ? defx#async_action('multi', ['open_directory', ['call', 'DefxResize']])
  \   : defx#async_action('call', 'DefxOpen')

nnoremap <silent> <buffer> <expr> O
  \ defx#is_directory()
  \   ? defx#async_action('multi', ['open_directory', ['call', 'DefxResize']])
  \   : defx#async_action('multi', ['drop', 'quit'])

nnoremap <silent> <buffer> <expr> H
  \ defx#do_action('multi', [['cd', '..'], ['call', 'DefxResize']])

nnoremap <silent> <buffer> <Tab>
  \ :<C-u>call win_gotoid(get(b:, 'prev_winid', defx#get_context().prev_winid))<CR>
'''
