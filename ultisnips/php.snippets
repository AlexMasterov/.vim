# PHP tags
#---------------------------------------------------------------------------
snippet php "<?php (php)" b
<?php

${0:${VISUAL}}
endsnippet

snippet eol "\PHP_EOL"
\PHP_EOL${0:;}
endsnippet

snippet re "return"
return ${1:${VISUAL}}${0:;}
endsnippet

# String Functions
#---------------------------------------------------------------------------
snippet ec "echo" t
echo ${1:${VISUAL}}${0:;}
endsnippet

snippet fn "fn (function)"
function ${1:foo}(${2})
{
    ${3:${VISUAL}}${0}
}
endsnippet

snippet if "if (if)"
if(${1:/** condition */})
{
    ${2:${VISUAL}}${0}
}
endsnippet

snippet else "else (else)" b
else
{
   ${1:${VISUAL}}${0}
}
endsnippet

# Classes and Objects
#---------------------------------------------------------------------------
snippet nn "namespace"
namespace ${1:`!v substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`};
endsnippet

snippet c "class"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
    ${0}
}
endsnippet

snippet __ "__constructor" b
function __construct($1) {
    ${0}
}
endsnippet

# Control Structures
#---------------------------------------------------------------------------
snippet for "for" s
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
    ${0}
}
endsnippet

# Debug
# ----------------------------------------------------------------
snippet dv "var_dump (dv)"
echo '<pre>'; var_dump(${1:${VISUAL}}); echo '</pre>'; ${2:die();}
${0}
endsnippet

snippet dp "print_r (dp)"
echo '<pre>'; print_r(${1:${VISUAL}}); echo '</pre>'; ${2:die();}
${0}
endsnippet

snippet up "Unique Pointer" i
std::unique_ptr<${1:`!p
snip.rv = snip.v.text.strip("*") or "klass"
`}>
endsnippet
