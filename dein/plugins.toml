[[plugins]]
repo = 'Shougo/dein.vim'
rtp = ''
hook_add = '''
  nnoremap <silent> ;u :<C-u>call dein#update()<CR>
  nnoremap <silent> ;i :<C-u>call dein#install()<CR>

  let g:dein#types#git#clone_depth = 1
  let g:dein#install_max_processes = 20
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['unite.vim', 'vim-quickrun']

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_func = 'EasyMotion#go'
on_map = {nx = '<Plug>(easymotion-'}
hook_add = '''
  nmap  s       <Plug>(easymotion-s)
  nmap ,s       <Plug>(easymotion-overwin-f)
  nmap ,S       <Plug>(easymotion-overwin-f2)
  nmap <Space>s <Plug>(easymotion-overwin-w)
  nmap <Space>S <Plug>(easymotion-overwin-line)
  nmap W        <Plug>(easymotion-lineforward)
  nmap B        <Plug>(easymotion-linebackward)

  map <expr> f getcurpos()[4] < col('$')-1 ? "\<Plug>(easymotion-fl)" : "\<Plug>(easymotion-Fl)"
  map <expr> F getcurpos()[4] <= 1         ? "\<Plug>(easymotion-fl)" : "\<Plug>(easymotion-Fl)"

  Autocmd ColorScheme,Syntax * call EasymotionColors()

  function! EasymotionColors() abort
    hi EasyMotionTarget       guifg=#2B2B2B guibg=#F6F7F7 gui=bold
    hi EasyMotionTarget2First guifg=#FF0000 guibg=#F6F7F7 gui=bold
    hi link EasyMotionShade         Comment
    hi link EasyMotionMoveHL        Search
    hi link EasyMotionIncCursor     Cursor
    hi link EasyMotionTarget2Second EasyMotionTarget
  endfunction
'''
hook_source = '''
  let g:EasyMotion_verbose = 0
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_show_prompt = 0
  let g:EasyMotion_startofline = 0
  let g:EasyMotion_space_jump_first = 1
  let g:EasyMotion_enter_jump_first = 1
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {x = '<Plug>(EasyAlign)'}
hook_add = 'vmap <Enter> <Plug>(EasyAlign)'
hook_source = 'source ~/vimfiles/dein/plugins/easyalign.vim'

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>(choosewin)'}
hook_add = '''
  nmap = <Plug>(choosewin)
  AutocmdFT vimfiler nmap <buffer> - <Plug>(choosewin)
'''
hook_source = '''
  let g:choosewin_label = 'WERABC'
  let g:choosewin_label_align = 'left'
  let g:choosewin_blink_on_land = 0
  let g:choosewin_overlay_enable = 2
  let g:choosewin_color_land = {'gui': ['#0000FF', '#F6F7F7', 'NONE']}
  let g:choosewin_color_label = {'gui': ['#FFE1CC', '#2B2B2B', 'bold']}
  let g:choosewin_color_label_current = {'gui': ['#CCE5FF', '#2B2B2B', 'bold']}
  let g:choosewin_color_other = {'gui': ['#F6F7F7', '#EEEEEE', 'NONE']}
  let g:choosewin_color_shade = {'gui': ['#F6F7F7', '#EEEEEE', 'NONE']}
  let g:choosewin_color_overlay = {'gui': ['#2B2B2B', '#2B2B2B', 'bold']}
  let g:choosewin_color_overlay_current = {'gui': ['#CCE5FF', '#CCE5FF', 'bold']}
'''

[[plugins]]
repo = 'simeji/winresizer'
on_func = ['WinResizerStartResize', 'WinResizerStartResizeGUI']
hook_add = '''
  nnoremap <silent> <Space><Enter> :<C-u>call WinResizerStartResize()<CR>
  nnoremap <silent> <Space><BS>    :<C-u>call WinResizerStartResizeGUI()<CR>
'''
hook_source = '''
  let g:winresizer_vert_resize = 4
  let g:winresizer_horiz_resize = 1
  let g:winresizer_keycode_finish = char2nr('o')
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap  q <Plug>(caw:range:toggle)
  xmap  q <Plug>(caw:hatpos:toggle)
  nmap ,f <Plug>(caw:jump:comment-prev)
  nmap ,F <Plug>(caw:jump:comment-next)
  nmap ,a <Plug>(caw:dollarpos:toggle)

  nnoremap <silent> <Plug>(caw:range:toggle) :<C-u>call <SID>cawRangeToggle()<CR>
  function! s:cawRangeToggle() abort
    if v:count > 1
      let winView = winsaveview()
      execute "normal V". (v:count - 1) ."j\<Plug>(caw:hatpos:toggle)"
      call winrestview(winView)
    else
      execute "normal \<Plug>(caw:hatpos:toggle)"
    endif
  endfunction
'''
hook_source = '''
  let g:caw_no_default_keymappings = 1
  let g:caw_hatpos_skip_blank_line = 1
  let g:caw_dollarpos_sp_left = repeat("\u0020", 2)
'''

[[plugins]]
repo = 'AndrewRadev/sideways.vim'
on_cmd = 'Sideways'
hook_add = '''
  nnoremap <silent> <C-h> :<C-u>SidewaysLeft<CR>
  nnoremap <silent> <C-l> :<C-u>SidewaysRight<CR>
  nnoremap <silent> <S-h> :<C-u>SidewaysJumpLeft<CR>
  nnoremap <silent> <S-l> :<C-u>SidewaysJumpRight<CR>
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = 'SplitjoinSplit'
hook_add = 'nmap <silent> S :<C-u>silent SplitjoinSplit<CR>'
hood_source = '''
  let g:splitjoin_join_mapping = ''
  let g:splitjoin_split_mapping = ''
'''

[[plugins]]
repo = 'jakobwesthoff/argumentrewrap'
hook_add = 'map <silent> K :<C-u>call argumentrewrap#RewrapArguments()<CR>'

[[plugins]]
repo = 'kana/vim-smartchr'
hook_add = '''
  AutocmdFT php
    \  inoremap <buffer> <expr> $ smartchr#loop('$', '$this->', 'self::', 'static::', '$$')
    \| inoremap <buffer> <expr> > smartchr#loop('>', '=>', '>>')

  AutocmdFT javascript
    \  inoremap <buffer> <expr> $ smartchr#loop('$', 'this.', '$$')
    \| inoremap <buffer> <expr> - smartchr#loop('-', '--', '_')

  AutocmdFT haskell
    \  inoremap <buffer> <expr> \ smartchr#loop('\ ', '\\')
    \| inoremap <buffer> <expr> - smartchr#loop('-', ' -> ', ' <- ')

  AutocmdFT yaml
    \  inoremap <buffer> <expr> > smartchr#loop('>', '%>')
    \| inoremap <buffer> <expr> < smartchr#loop('<', '<%', '<%=')
'''

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_func = 'switch#'
on_cmd = 'Switch'
hook_add = 'source ~/vimfiles/dein/plugins/switch.vim'
hook_source = "let g:switch_mapping = ''"

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_if = "isdirectory(bufname('%'))"
on_cmd = ['VimFiler', 'VimFilerCurrentDir']
on_map = {n = '<Plug>'}
hook_add = 'source ~/vimfiles/dein/plugins/vimfiler_add.vim'
hook_source = '''
  let g:vimfiler_data_directory = $CACHE.'/vimfiler'
  let g:unite_kind_file_use_trashbox = IsWindows()

  let g:vimfiler_ignore_pattern =
    \ '^\%(\..*\|^.\|.git\|.hg\|bin\|var\|etc\|build\|dist\|vendor\|node_modules\|gulpfile.js\|package.json\)$'

  " Icons
  let g:vimfiler_file_icon = ' '
  let g:vimfiler_tree_leaf_icon = ''
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_marked_file_icon = '+'

  " Default profile
  let s:vimfiler_default = {
    \ 'safe': 0,
    \ 'parent': 0,
    \ 'explorer': 1,
    \ 'winwidth': 26,
    \ 'winminwidth': 18
    \}

  call vimfiler#custom#profile('default', 'context', s:vimfiler_default)
'''

[[plugins]]
repo = 'triglav/vim-visual-increment'
on_map = {x = '<Plug>Visual'}
hook_add = '''
  xmap <C-a> <Plug>VisualIncrement
  xmap <C-x> <Plug>VisualDecrement
'''
hook_source = 'set nrformats+=alpha'

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hood_source = 'let g:lexima_no_default_rules = 1'
hook_post_source = 'source ~/vimfiles/dein/plugins/lexima.vim'
