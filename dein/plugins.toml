[[plugins]]
repo = 'Shougo/dein.vim'
rtp = ''
hook_add = '''
  let g:dein#types#git#clone_depth = 1
  let g:dein#install_max_processes = 30
  nnoremap <silent> ;u :<C-u>call dein#update()<CR>
  nnoremap <silent> ;i :<C-u>call dein#install()<CR>
'''

[[plugins]]
repo = 'AlexMasterov/vim-stay'
rev = 'fix/1.4.0'
on_path = '.*'
hook_source = 'let g:stay_verbosity = -1'
hook_post_source = "let g:volatile_ftypes += ['denite', 'unite', 'gita', 'vimfiler']"

[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hood_source = '''
  let g:lexima_no_default_rules = 1
'''
hook_post_source = 'source ~/vimfiles/dein/plugins/lexima.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'simeji/winresizer'
on_cmd = ['WinResizerStartResize', 'WinResizerStartMove']
hook_add = '''
  nnoremap <silent> <Space><Enter> :<C-u>WinResizerStartResize<CR>
  nnoremap <silent> <Space><BS>    :<C-u>WinResizerStartMove<CR>
'''
hook_source = '''
  let g:winresizer_vert_resize = 4
  let g:winresizer_horiz_resize = 1
  let g:winresizer_keycode_finish = char2nr('o')
'''

# HTML
[[plugins]]
repo = 'othree/html5.vim'
hook_add = '''
  Autocmd Syntax html
    \  hi! link htmlError    htmlTag
    \| hi! link htmlTagError htmlTag
'''

[[plugins]]
repo = 'gregsexton/MatchTag'
hook_add = '''
  Autocmd Syntax xml runtime ftplugin/xml.vim
  Autocmd Syntax twig,blade runtime ftplugin/html.vim

  AutocmdFT php
    \ Autocmd BufWinEnter <buffer> call RemoveMatchTagEvent()

  function! RemoveMatchTagEvent() abort
    if !exists('#matchhtmlparen')
      return
    endif

    augroup matchhtmlparen
      autocmd! * <buffer>
    augroup END
  endfunction
'''

[[plugins]]
repo = 'SirVer/ultisnips'
on_i = 1
on_ft = 'snippets'
hook_add = '''
  Autocmd BufNewFile,BufReadPost *.snippets
    \ set filetype=snippets nowrap foldmethod=manual
'''
hook_source = '''
  let g:UltiSnipsEnableSnipMate = 0
  let g:UltiSnipsExpandTrigger = '<C-F12>'
  let g:UltiSnipsListSnippets = '<C-F12>'
  let g:UltiSnipsSnippetDirectories = [$HOME . '/vimfiles/snippets']

  AutocmdFT twig  call UltiSnips#AddFiletypes('twig.html')
  AutocmdFT blade call UltiSnips#AddFiletypes('blade.html')
'''
hook_post_source = '''
  " imap <S-Space> <Plug>(ultisnips)
  imap `         <Plug>(ultisnips)
  xmap `         <Plug>(ultisnipsVisual)
  snoremap <C-c> <Esc>

  inoremap <silent> <Plug>(ultisnips)        <C-r>=UltiComplete("\`")<CR>
  xnoremap <silent> <Plug>(ultisnipsVisual) :<C-u>call UltiSnips#SaveLastVisualSelection()<CR>gvs

  function! UltiComplete(key) abort
    if len(UltiSnips#SnippetsInCurrentScope()) >= 1
      let [curPos, lineLength] = [getcurpos()[4], col('$')]
      let isBackspace = getline('.')[curPos-2] =~ '\s'
      let isStartLine = curPos <= 1
      let isText = curPos <= lineLength
      if isText && !isStartLine && !isBackspace
        return UltiSnips#ExpandSnippet()
      endif
    endif
    return a:key
  endfunction
'''

[[plugins]]
repo = 'mattn/emmet-vim'
on_map = {i = '<Plug>(emmet-'}
hook_add = '''
  AutocmdFT html,twig call EmmetMappings()

  function! EmmetMappings() abort
    imap <silent> <buffer> <Tab> <C-r>=EmmetComplete("\<Tab>")<CR>
  endfunction

  function! EmmetComplete(key) abort
    if pumvisible()
      return "\<C-n>"
    endif
    if emmet#isExpandable()
      let isBackspace = getline('.')[getcurpos()[4]-2] =~ '\s'
      if !isBackspace
        return emmet#expandAbbr(0, '')
      endif
    endif
    if exists('*Decomplete')
      return Decomplete()
    endif
    return a:key
  endfunction
'''
hook_source = '''
  let g:user_emmet_mode = 'i'
  let g:user_emmet_complete_tag = 0
  let g:user_emmet_install_global = 0
'''

[[plugins]]
repo = 'tyru/caw.vim'
on_map = {nx = '<Plug>'}
hook_add = '''
  nmap  q <Plug>(caw:range:toggle)
  xmap  q <Plug>(caw:hatpos:toggle)
  nmap ,f <Plug>(caw:jump:comment-prev)
  nmap ,F <Plug>(caw:jump:comment-next)
  nmap ,a <Plug>(caw:dollarpos:toggle)

  nnoremap <silent> <Plug>(caw:range:toggle) :<C-u>call <SID>cawRangeToggle()<CR>
  function! s:cawRangeToggle() abort
    if v:count > 1
      let winView = winsaveview()
      execute "normal V". (v:count - 1) ."j\<Plug>(caw:hatpos:toggle)"
      call winrestview(winView)
    else
      execute "normal \<Plug>(caw:hatpos:toggle)"
    endif
  endfunction
'''
hook_source = '''
  let g:caw_no_default_keymappings = 1
  let g:caw_hatpos_skip_blank_line = 1
  let g:caw_dollarpos_sp_left = repeat("\u0020", 2)
'''

[[plugins]]
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
  nnoremap <silent> ,u :<C-u>call UndotreeMyToggle()<CR>

  AutocmdFT undotree,diff setlocal nonu nornu colorcolumn=

  function! UndotreeMyToggle() abort
    if &l:filetype != 'php'
      let s:undotreeLastFiletype = &l:filetype
      AutocmdFT diff Autocmd BufEnter,WinEnter <buffer>
        \ let &l:syntax = s:undotreeLastFiletype
    endif
    UndotreeToggle
  endfunction
'''
hood_source = '''
  let g:undotree_WindowLayout = 4
  let g:undotree_SplitWidth = 36
  let g:undotree_SetFocusWhenToggle = 1

  function! g:Undotree_CustomMap() abort
    nmap <buffer> o <Enter>
    nmap <buffer> u <Plug>UndotreeUndo
    nmap <buffer> r <Plug>UndotreeRedo
    nmap <buffer> h <Plug>UndotreeGoNextState
    nmap <buffer> l <Plug>UndotreeGoPreviousState
    nmap <buffer> d <Plug>UndotreeDiffToggle
    nmap <buffer> t <Plug>UndotreeTimestampToggle
    nmap <buffer> C <Plug>UndotreeClearHistory
  endfunction

  AutocmdFT diff Autocmd BufEnter,WinEnter <buffer>
    \  nnoremap <silent> <buffer> q :<C-u>UndotreeHide<CR>
    \| nnoremap <silent> <buffer> ` :<C-u>UndotreeHide<CR>
'''

[[plugins]]
repo = 'jakobwesthoff/argumentrewrap'
hook_add = 'map <silent> K :<C-u>call argumentrewrap#RewrapArguments()<CR>'

[[plugins]]
repo = 'haya14busa/vim-keeppad'
on_cmd = ['KeeppadOn', 'KeeppadOff']
hook_add = 'Autocmd BufReadPre *.{json,css,scss,sss,sugarss},qfreplace* KeeppadOn'
hook_source = 'let g:keeppad_autopadding = 0'

[[plugins]]
repo = 'kana/vim-smartword'
on_map = {nx = '<Plug>(smartword-'}
hook_add = '''
  for char in split('w e b ge')
    execute printf('nmap %s <Plug>(smartword-%s)', char, char)
    execute printf('vmap %s <Plug>(smartword-%s)', char, char)
  endfor | unlet char
'''

[[plugins]]
repo = 'triglav/vim-visual-increment'
on_map = {x = '<Plug>Visual'}
hook_add = '''
  xmap <C-a> <Plug>VisualIncrement
  xmap <C-x> <Plug>VisualDecrement
'''
hook_source = 'set nrformats+=alpha'

[[plugins]]
repo = 'AndrewRadev/sideways.vim'
on_cmd = 'Sideways'
hook_add = '''
  nnoremap <silent> <C-h> :<C-u>SidewaysLeft<CR>
  nnoremap <silent> <C-l> :<C-u>SidewaysRight<CR>
  nnoremap <silent> <S-h> :<C-u>SidewaysJumpLeft<CR>
  nnoremap <silent> <S-l> :<C-u>SidewaysJumpRight<CR>

  AutocmdFT php let b:sideways_definitions = [
    \ {
    \   'start':     '<%=\=\s*\k\{1,}',
    \   'end':       '\s*%>',
    \   'delimiter': ',\s*',
    \   'brackets':  ['([''"', ')]''"'],
    \ },
    \]
    " \ {
    " \   'start':     '(\_s*',
    " \   'end':       ')',
    " \   'delimiter': '\s*=\+\s*',
    " \   'brackets':  ['(', ')'],
    " \ },

  AutocmdFT javascript let b:sideways_definitions = [
    \ {
    \   'start':                   '<\k\+\_s\+',
    \   'end':                     '\s*/\?>',
    \   'delimited_by_whitespace': 1,
    \   'brackets':                ['"''{', '"''}'],
    \ },
    \]
'''

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'
on_cmd = 'SplitjoinSplit'
hook_add = 'nmap <silent> S :<C-u>silent SplitjoinSplit<CR>'
hood_source = '''
  let g:splitjoin_join_mapping = ''
  let g:splitjoin_split_mapping = ''
'''

[[plugins]]
repo = 'itchyny/vim-parenmatch'
hook_add = '''
  let g:parenmatch = 0

  AutocmdFT php,javascript,json,css
    \ Autocmd BufRead,BufEnter <buffer> let b:parenmatch = 1

  Autocmd ColorScheme,Syntax *
    \ hi ParenMatch guifg=#2B2B2B guibg=#EEEEEE gui=NONE
'''

[[plugins]]
repo = 'lilydjwg/colorizer'
on_cmd = ['ColorToggle', 'ColorHighlight', 'ColorClear']
hook_add = '''
  let g:color_codes_ft = split('css html twig sugarss')

  function! RemoveColorizerEvent() abort
    if !exists('#Colorizer') | return | endif
    augroup Colorizer
      autocmd!
    augroup END
  endfunction

  Autocmd BufNewFile,BufRead,BufEnter,WinEnter,BufWinEnter *
    \ execute index(g:color_codes_ft, &filetype) ==# -1
      \ ? 'call RemoveColorizerEvent()'
      \ : 'ColorHighlight'
'''
hook_source = 'let g:colorizer_nomap = 1'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_func = 'EasyMotion#go'
on_map = {nx = '<Plug>(easymotion-'}
hook_add = '''
  nmap  s       <Plug>(easymotion-s)
  nmap ,s       <Plug>(easymotion-overwin-f)
  nmap ,S       <Plug>(easymotion-overwin-f2)
  nmap <Space>s <Plug>(easymotion-overwin-w)
  nmap <Space>S <Plug>(easymotion-overwin-line)
  nmap W        <Plug>(easymotion-lineforward)
  nmap B        <Plug>(easymotion-linebackward)

  map <expr> f getcurpos()[4] < col('$')-1 ? "\<Plug>(easymotion-fl)" : "\<Plug>(easymotion-Fl)"
  map <expr> F getcurpos()[4] <= 1         ? "\<Plug>(easymotion-fl)" : "\<Plug>(easymotion-Fl)"

  function! EasymotionColors() abort
    hi EasyMotionTarget       guifg=#2B2B2B guibg=#F6F7F7 gui=bold
    hi EasyMotionTarget2First guifg=#FF0000 guibg=#F6F7F7 gui=bold
    hi link EasyMotionShade         Comment
    hi link EasyMotionMoveHL        Search
    hi link EasyMotionIncCursor     Cursor
    hi link EasyMotionTarget2Second EasyMotionTarget
  endfunction

  Autocmd ColorScheme,Syntax * call EasymotionColors()
'''
hook_source = '''
  let g:EasyMotion_verbose = 0
  let g:EasyMotion_do_mapping = 0
  let g:EasyMotion_show_prompt = 0
  let g:EasyMotion_startofline = 0
  let g:EasyMotion_space_jump_first = 1
  let g:EasyMotion_enter_jump_first = 1
'''

[[plugins]]
repo = 'kana/vim-smartchr'
hook_add = '''
  " inoremap <expr> , smartchr#one_of(', ', ',')
  inoremap <expr> =
    \ search('\(&\<bar><bar>\<bar>+\<bar>-\<bar>/\<bar>>\<bar><\) \%#', 'bcn')? '<bs>= '
    \: search('\(*\<bar>!\)\%#', 'bcn') ? '= '
    \: smartchr#one_of(' = ', '=', ' == ')

  AutocmdFT php
    \  inoremap <buffer> <expr> $ smartchr#loop('$', '$this->')
    \| inoremap <buffer> <expr> > smartchr#loop('>', '=>', '>>')

  AutocmdFT javascript
    \  inoremap <buffer> <expr> $ smartchr#loop('$', 'this.', '$$')
    \| inoremap <buffer> <expr> - smartchr#loop('-', '--', '_')

  AutocmdFT haskell
    \  inoremap <buffer> <expr> \ smartchr#loop('\ ', '\\')
    \| inoremap <buffer> <expr> - smartchr#loop('-', ' -> ', ' <- ')

  AutocmdFT go
    \ inoremap <buffer> <expr> - smartchr#loop('-', ':=', '--')

  AutocmdFT c,cpp inoremap <buffer> <expr> .
    \ smartchr#loop('.', '->', '...')

  AutocmdFT yaml
    \  inoremap <buffer> <expr> > smartchr#loop('>', '%>')
    \| inoremap <buffer> <expr> < smartchr#loop('<', '<%', '<%=')
'''

[[plugins]]
repo = 'Shougo/deol.nvim'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_add = '''
  Autocmd Syntax go
    \  hi goPackage  guifg=#008080 gui=NONE
    \| hi goBuiltins guifg=#AA0D91 gui=NONE
'''
hook_source = '''
  let g:go_fmt_autosave = 0
  let g:go_metalinter_autosave = 0

  " Syntax
  let g:go_highlight_functions = 1
  let g:go_highlight_string_spellcheck = 0
'''

[[plugins]]
repo = 'drmingdrmer/vim-indent-lua'

[[plugins]]
repo = 'xolox/vim-misc'

[[plugins]]
repo = 'xolox/vim-lua-ftplugin'
depends = 'xolox/vim-misc'
hook_add = '''
  let g:loaded_lua_ftplugin = 1

	let g:lua_check_syntax = 0
	let g:lua_complete_omni = 1
	let g:lua_complete_dynamic = 0
	let g:lua_define_completion_mappings = 0
  let g:lua_compiler_name = IsWindows() ? 'luac5.1' : 'luac'

  AutocmdFT lua set omnifunc=xolox#lua#omnifunc
'''

[[plugins]]
repo = 'Shougo/unite.vim'
on_cmd = 'Unite'
hook_add = '''
  nnoremap <silent> ;l :<C-u>Unite location_list -no-empty -toggle<CR>

  " Unite tuning
  AutocmdFT unite* setlocal nolist
  AutocmdFT unite* Autocmd InsertEnter,InsertLeave <buffer>
    \ setlocal nonu nornu nolist colorcolumn=

  AutocmdFT unite* call UniteMappings()
  function! UniteMappings() abort
    let b:unite = unite#get_current_unite()

    " unite-webcolorname
    if b:unite.buffer_name ==# 'colors'
      nmap <silent> <buffer> o <CR>
    endif

    " Normal mode
    nmap <buffer> e     <Nop>
    nmap <buffer> <BS>  <Nop>
    nmap <buffer> <C-k> <C-u>
    nmap <buffer> <C-e> <Plug>(unite_move_head)
    nmap <buffer> R     <Plug>(unite_redraw)
    nmap <buffer> <Tab> <Plug>(unite_insert_enter)<Right><Left>
    nmap <buffer> i     <Plug>(unite_insert_enter)<Right><Left>
    nmap <buffer> I     <Plug>(unite_insert_enter)<Plug>(unite_move_head)
    nmap <buffer> e     <Plug>(unite_toggle_mark_current_candidate)
    nmap <buffer> E     <Plug>(unite_toggle_mark_current_candidate_up)
    nmap <buffer> <C-o> <Plug>(unite_toggle_transpose_window)
    nmap <silent> <buffer> <nowait> <expr> o unite#do_action('open')
    nmap <silent> <buffer> <nowait> <expr> O unite#do_action('choose')
    nmap <silent> <buffer> <nowait> <expr> s unite#do_action('above')
    nmap <silent> <buffer> <nowait> <expr> S unite#do_action('below')
    nmap <silent> <buffer> <nowait> <expr> v unite#do_action('left')
    nmap <silent> <buffer> <nowait> <expr> V unite#do_action('right')
    nmap <silent> <buffer> <nowait> <expr> b unite#do_action('backup')
    nmap <silent> <buffer> <nowait> <expr> D unite#do_action('fdelete')
    nmap <silent> <buffer> <nowait> <expr> r
      \ b:unite.profile_name ==# 'line' ? unite#do_action('replace') : unite#do_action('rename')
    nmap <silent> <buffer> <nowait> <expr> R
      \ b:unite.profile_name ==# 'line' ? unite#do_action('replace') : unite#do_action('exrename')
    nmap <buffer> <expr> <C-x> unite#mappings#set_current_sorters(
      \ unite#mappings#get_current_sorters() ==# [] ? ['sorter_ftime', 'sorter_reverse'] : []) . "\<Plug>(unite_redraw)"

    " Insert mode
    imap <buffer> <C-e>   <End>
    imap <buffer> <C-a>   <Plug>(unite_move_head)
    imap <buffer> <C-j>   <Plug>(unite_move_left)
    imap <buffer> <C-l>   <Plug>(unite_move_right)
    imap <buffer> <Tab>   <Plug>(unite_insert_leave)
    imap <buffer> <S-Tab> <Plug>(unite_complete)
    imap <buffer> <C-j>   <Plug>(unite_select_next_line)
    imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
    imap <buffer> <C-o>   <Plug>(unite_toggle_transpose_window)
    imap <buffer> <expr> <C-h>  col('$') > 2 ? "\<Plug>(unite_delete_backward_char)" : ""
    imap <buffer> <expr> <BS>   col('$') > 2 ? "\<Plug>(unite_delete_backward_char)" : ""
    imap <buffer> <expr> <S-BS> col('$') > 2 ? "\<Plug>(unite_delete_backward_word)" : ""
    imap <buffer> <expr> q      getline('.')[getcurpos()[4]-2] ==# 'q' ? "\<Plug>(unite_exit)" : "\q"
    imap <buffer> <expr> <C-x> unite#mappings#set_current_sorters(
      \ unite#mappings#get_current_sorters() == [] ? ['sorter_ftime', 'sorter_reverse'] : []
      \) . col('$') > 2 ? "" : "\<Plug>(unite_delete_backward_word)"
  endfunction
'''
hook_source = '''
  source ~/vimfiles/dein/plugins/unite.vim
'''

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = ['denite.nvim', 'unite.vim']
hook_add = '''
  nnoremap <silent> ;w :<C-u>Unite neomru/file -toggle -profile-name=neomru/project<CR>
  nnoremap <silent> ;W :<C-u>Unite neomru/file -toggle<CR>

  Autocmd VimLeavePre,BufWipeout,BufLeave,WinLeave *
    \ call neomru#_save()
'''
hook_source = '''
  let g:neomru#filename_format = ':.'
  let g:neomru#time_format = '%m.%d — %H:%M'
  let g:neomru#file_mru_limit = 60
  let g:neomru#file_mru_path = $CACHE.'/unite/mru_file'
  let g:neomru#file_mru_ignore_pattern = '\.\%(vimrc\|log\)$'
  let g:neomru#directory_mru_path = $CACHE.'/unite/mru_directory'

  call unite#custom#profile('neomru/project', 'matchers',
    \ ['matcher_hide_current_file', 'matcher_project_files', 'matcher_fuzzy'])
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = ['unite.vim', 'denite.nvim']
hook_add = '''
  nnoremap <silent> ;y :<C-u>Denite neoyank -no-statusline -mode=normal<CR>
  nnoremap <silent> ;r :<C-u>Denite neoyank register -buffer-name=register<CR>
  xnoremap <silent> ;r :<C-u>Denite neoyank register -buffer-name=register -default-action=replace<CR>
'''
hook_source = '''
  let g:neoyank#limit = 50
  let g:neoyank#file = $CACHE.'/unite/yank_file'
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_source = 'unite.vim'
hook_add = '''
  AutocmdFT qfreplace* nested call QfreplaceBuffer()

  " qfreplace tuning
  function! QfreplaceBuffer() abort
    call feedkeys("\<CR>\<Esc>")
    setlocal nonu nornu colorcolumn= laststatus=0
    Autocmd BufEnter,WinEnter <buffer> setlocal laststatus=0
    Autocmd BufLeave,BufDelete <buffer> set laststatus=2
    Autocmd InsertEnter,InsertLeave <buffer> setlocal nonu nornu colorcolumn=
  endfunction
'''

[[plugins]]
repo = 'Shougo/unite-outline'
hook_add = 'nnoremap <silent> ;; :<C-u>Unite outline -silent -no-empty -toggle -winheight=16<CR>'

[[plugins]]
repo = 'mattn/httpstatus-vim'
on_source = 'unite.vim'
hook_add = 'nnoremap <silent> <F12> :<C-u>Unite httpstatus -start-insert<CR>'

[[plugins]]
repo = 'pasela/unite-webcolorname'
on_source = 'unite.vim'
hook_add = 'nnoremap <silent> <F11> :<C-u>Unite webcolorname -buffer-name=colors -start-insert<CR>'

# Denite
[[plugins]]
repo = 'Shougo/denite.nvim'
if = "has('python3')"
on_cmd = 'Denite'
hook_add = '''
  nnoremap <silent> ;g :<C-u>Denite grep<CR>
  nnoremap <silent> ;j :<C-u>Denite jump<CR>
  nnoremap <silent> ;o :<C-u>Denite file_old<CR>
  nnoremap <silent> ;b :<C-u>Denite buffer -reversed<CR>
  nnoremap <silent> `  :<C-u>Denite buffer   -winheight=8 -reversed<CR>
  nnoremap <silent> ;r :<C-u>Denite register -winheight=8<CR>
  nnoremap <silent> ;` :<C-u>Denite buffer   -mode=insert<CR>
  nnoremap <silent> ;f :<C-u>Denite file_rec -mode=insert<CR>
  nnoremap <silent> ;s :<C-u>Denite line     -buffer-name=search -mode=insert<CR>
  nnoremap <silent> ;v :<C-u>DeniteCursorWord line -buffer-name=search<CR>
'''
hook_source = '''
  call denite#custom#option('default', {
      \ 'mode': 'normal',
      \ 'prompt': ' ❯',
      \ 'empty': 1,
      \ 'source_names': 'short',
      \ 'highlight_mode_normal': 'Visual',
      \ 'highlight_matched_range': 'User5'
      \})

  call denite#custom#var('buffer', 'date_format', '')

  if executable('rg')
    " Ripgrep: https://github.com/BurntSushi/ripgrep
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'final_opts', ['.'])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'default_opts', ['--maxdepth', '8', '--vimgrep', '--no-heading'])
    call denite#custom#var('file_rec', 'command',  [
        \ 'rg', '--no-messages', '--maxdepth', '8', '--no-line-number', '--fixed-strings', '--files-with-matches', '--hidden', '--follow', '.'])
  endif

  " Sources
  call denite#custom#source('buffer',                   'sorters',    ['sorter_reverse'])
  call denite#custom#source('file_rec',                 'sorters',    ['sorter_sublime'])
  call denite#custom#source('file_rec',                 'matchers',   ['matcher_substring'])
  call denite#custom#source('file_mru',                 'matchers',   ['matcher_project_files', 'matcher_substring'])
  call denite#custom#source('file_mru,file_rec,buffer', 'converters', ['converter_relative_word'])
  " call denite#custom#source('file_old',                 'matchers',   ['matcher_fuzzy', 'matcher_project_files'])

  " Mappings
  call denite#custom#map('normal', 'Q',        '<denite:quit>',                        'noremap')
  call denite#custom#map('normal', '`',        '<denite:quit>',                        'noremap')
  call denite#custom#map('normal', '<Esc>',    '<denite:quit>',                        'noremap')
  call denite#custom#map('normal', '-',        '<denite:choose_action>',               'noremap')
  call denite#custom#map('normal', 'd',        '<denite:do_action:delete>',            'noremap')
  call denite#custom#map('normal', 'D',        '<denite:do_action:delete>',            'noremap')
  call denite#custom#map('normal', 'o',        '<denite:do_action:default>',           'noremap')
  call denite#custom#map('normal', 'f',        '<denite:do_action:find>',              'noremap')
  call denite#custom#map('normal', 'r',        '<denite:do_action:reset>',             'noremap')
  call denite#custom#map('normal', 'u',        '<denite:do_action:update>',            'noremap')
  call denite#custom#map('normal', '<Space>v', '<denite:do_action:vsplit>',            'noremap')
  call denite#custom#map('normal', '<Tab>',    '<denite:enter_mode:insert>',           'noremap')
  call denite#custom#map('normal', '<C-j>',    '<denite:scroll_window_downwards>',     'noremap')
  call denite#custom#map('normal', '<C-k>',    '<denite:scroll_window_upwards>',       'noremap')
  call denite#custom#map('insert', '<C-i>',    '<denite:choose_action>',               'noremap')
  call denite#custom#map('insert', '<Tab>',    '<denite:enter_mode:normal>',           'noremap')
  call denite#custom#map('insert', '<C-j>',    '<denite:move_to_next_line>',           'noremap')
  call denite#custom#map('insert', '<C-k>',    '<denite:move_to_prev_line>',           'noremap')
  call denite#custom#map('insert', '<C-p>',    '<denite:paste_from_default_register>', 'noremap')
  call denite#custom#map('insert', '<A-j>',    '<denite:scroll_window_downwards>',     'noremap')
  call denite#custom#map('insert', '<A-k>',    '<denite:scroll_window_upwards>',       'noremap')
  call denite#custom#map('insert', '<C-d>',    '<denite:delete_char_before_caret>',    'noremap')
  call denite#custom#map('insert', '<C-h>',    '<denite:move_caret_to_left>',          'noremap')
  call denite#custom#map('insert', '<C-l>',    '<denite:move_caret_to_right>',         'noremap')
  call denite#custom#map('insert', '<C-a>',    '<denite:move_caret_to_head>',          'noremap')
  call denite#custom#map('insert', '<C-e>',    '<denite:move_caret_to_tail>',          'noremap')
  call denite#custom#map('insert', '<Space>v', '<denite:do_action:vsplit>',            'noremap')

  Autocmd Syntax denite
    \  highlight! default link deniteStatusLinePath   StatusLine
    \| highlight! default link deniteStatusLineNumber StatusLine
'''

[[plugins]]
repo = 't9md/vim-choosewin'
on_map = {n = '<Plug>(choosewin)'}
hook_add = '''
  nmap = <Plug>(choosewin)
  AutocmdFT vimfiler nmap <buffer> - <Plug>(choosewin)
'''
hook_source = '''
  let g:choosewin_label = 'WERABC'
  let g:choosewin_label_align = 'left'
  let g:choosewin_blink_on_land = 0
  let g:choosewin_overlay_enable = 2
  let g:choosewin_color_land = {'gui': ['#0000FF', '#F6F7F7', 'NONE']}
  let g:choosewin_color_label = {'gui': ['#FFE1CC', '#2B2B2B', 'bold']}
  let g:choosewin_color_label_current = {'gui': ['#CCE5FF', '#2B2B2B', 'bold']}
  let g:choosewin_color_other = {'gui': ['#F6F7F7', '#EEEEEE', 'NONE']}
  let g:choosewin_color_shade = {'gui': ['#F6F7F7', '#EEEEEE', 'NONE']}
  let g:choosewin_color_overlay = {'gui': ['#2B2B2B', '#2B2B2B', 'bold']}
  let g:choosewin_color_overlay_current = {'gui': ['#CCE5FF', '#CCE5FF', 'bold']}
'''

# Nginx
[[plugins]]
repo = 'chr4/nginx.vim'

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
on_func = 'gina#'
hook_add = '''
  nnoremap <silent> -c :<C-u>Gina commit<CR>
  nnoremap <silent> -b :<C-u>Gina branch<CR>
  nnoremap <silent> -s :<C-u>Gina status<CR>
  nnoremap <silent> -i :<C-u>Gina info<CR>
  nnoremap <silent> -l :<C-u>Gina log<CR>
  nnoremap <silent> -C :<C-u>Gina changes<CR>
'''
hook_source = '''
  let g:gina#command#status#use_default_mappings = 0

  call gina#custom#execute(
    \ '/\%(status\|commit\|branch\|blame\|ls\|grep\|changes\|tag\)',
    \ 'let &l:statusline = " "'
    \)

  " branch
  call gina#custom#mapping#nmap('branch', 'n', '<Plug>(gina-branch-new)')
  call gina#custom#mapping#nmap('branch', 'm', '<Plug>(gina-branch-move)')
  call gina#custom#mapping#nmap('branch', 'M', '<Plug>(gina-branch-move-force)')
  call gina#custom#mapping#nmap('branch', 'D', '<Plug>(gina-branch-delete)')
  call gina#custom#mapping#nmap('branch', 'r', '<Plug>(gina-branch-refrsh)')
  call gina#custom#mapping#nmap('branch', 'o', '<Plug>(gina-commit-checkout)')

  " status
  call gina#custom#mapping#nmap('status', 's', '<Plug>(gina-index-toggle)')

  " log
  call gina#custom#mapping#nmap('log', 'p', '<Plug>(gina-diff-preview)')

  AutocmdFT gina*,git
    \  nmap <silent> <buffer> q :<C-u>quit<CR>
    \| nmap <silent> <buffer> Q :<C-u>quit!<CR>

  Autocmd Syntax gina*
    \  hi AnsiColor1  guifg=#006633 gui=NONE
    \| hi AnsiColor2  guifg=#2B2B2B guibg=#CCE5FF gui=NONE
    \| hi AnsiColor3  guifg=#2B2B2B guibg=#FAE5E4 gui=NONE
    \| hi AnsiColor11 guifg=#999999 gui=NONE
    \| hi AnsiColor13 guifg=#0050B0 gui=bold
    \| hi AnsiColor14 guifg=#BA4747 gui=NONE
'''

[[plugins]]
repo = 'stephpy/vim-yaml'

[[plugins]]
repo = 'mrk21/yaml-vim'

[[plugins]]
repo = 'w0rp/ale'
on_func = 'ale#'
hook_add = '''
  let g:ale_emit_conflict_warnings = 0

  nmap <silent> <Right> <Plug>(ale_next_wrap)
  nmap <silent> <Left>  <Plug>(ale_previous_wrap)

  Autocmd BufNewFile,BufEnter,BufWrite,WinEnter,TextChanged,TextChangedI
    \ *.{php,js,ts,twig,css,yml,lua,go}
      \ call ale#Queue(0)

  Autocmd ColorScheme *
    \  hi ALEErrorSign   guifg=#2B2B2B guibg=#FFC08E gui=bold
    \| hi ALEWarningSign guifg=#2B2B2B guibg=#F2E8DF gui=bold
    \| hi ALEErrorLine   guifg=#2B2B2B guibg=#F2E8DF gui=NONE
    \| hi ALEWarningLine guifg=#2B2B2B guibg=#F2E8DF gui=NONE
'''
hook_source = '''
  let g:ale_echo_cursor = 1
  let g:ale_lint_on_save = 0
  let g:ale_lint_on_enter = 0
  let g:ale_lint_on_text_changed = 0
  let g:ale_sign_error = '->'
  let g:ale_sign_warning = '—'
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = ' %s'
  let g:ale_set_signs = 0
  let g:ale_sign_column_always = 0

  let g:ale_linters = {
    \  'php': ['php'],
    \  'javascript': ['eslint'],
    \  'typescript': ['tslint'],
    \  'yaml': ['yamllint'],
    \  'css': ['stylelint'],
    \  'lua': ['luacheck'],
    \  'go': ['golint'],
    \}
'''

# Twig
[[plugins]]
repo = 'tokutake/twig-indent'

# Blade
[[plugins]]
repo = 'jwalton512/vim-blade'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {x = '<Plug>(EasyAlign)'}
hook_add = 'vmap <Enter> <Plug>(EasyAlign)'
hook_source = 'source ~/vimfiles/dein/plugins/easyalign.vim'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
on_func = 'switch#'
on_cmd = 'Switch'
hook_add = 'source ~/vimfiles/dein/plugins/switch.vim'
hook_source = "let g:switch_mapping = ''"

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'

[[plugins]]
repo = 'heavenshell/vim-pydocstring'
hook_add = '''
  let g:pydocstring_enable_mapping = 0

  AutocmdFT python
    \ nmap <buffer> ,c <Plug>(pydocstring)
'''

[[plugins]]
repo = 'Shougo/vimfiler.vim'
on_if = "isdirectory(bufname('%'))"
on_cmd = ['VimFiler', 'VimFilerCurrentDir']
on_map = {n = '<Plug>'}
hook_add = '''
  " ;d: open vimfiler explrer
  nnoremap <silent> ;d :<C-u>call CreateVimFiler()<CR>
  " Tab: jump to vimfiler window
  nnoremap <silent> <Tab> :<C-u>call JumpToVimfiler()<CR>

  function! CreateVimFiler() abort
    for winnr in filter(range(1, winnr('$')), "getwinvar(v:val, '&filetype') ==# 'vimfiler'")
      if !empty(winnr)
        execute winnr . 'wincmd w' | return
      endif
    endfor
    VimFiler -split -invisible -create -no-quit
  endfunction

  function! JumpToVimfiler() abort
    if getwinvar(winnr(), '&filetype') ==# 'vimfiler'
      wincmd p
    else
      for winnr in filter(range(1, winnr('$')), "getwinvar(v:val, '&filetype') ==# 'vimfiler'")
        execute winnr . 'wincmd w'
      endfor
    endif
  endfunction

  " Vimfiler tuning
  AutocmdFT vimfiler let &l:statusline = ' '
  Autocmd BufEnter,WinEnter vimfiler* nested
    \  let &l:statusline = ' '
    \| setlocal nonu nornu nolist cursorline colorcolumn=
    \| Autocmd BufLeave,WinLeave <buffer> setlocal nocursorline

  AutocmdFT vimfiler call VimfilerMappings()
  function! VimfilerMappings() abort
    silent! nunmap <buffer> <Space>
    silent! nunmap <buffer> <Tab>

    " Normal mode
    nmap <buffer> <C-j> 4j
    nmap <buffer> <C-k> 4k
    nmap <buffer> <C-c> <Esc>
    nmap <buffer> f <Plug>(vimfiler_grep)
    nmap <buffer> H <Plug>(vimfiler_cursor_top)
    nmap <buffer> R <Plug>(vimfiler_redraw_screen)
    nmap <buffer> l <Plug>(vimfiler_expand_tree)
    nmap <buffer> L <Plug>(vimfiler_cd_file)
    nmap <buffer> J <Plug>(vimfiler_switch_to_root_directory)
    nmap <buffer> K <Plug>(vimfiler_switch_to_project_directory)
    nmap <buffer> H <Plug>(vimfiler_switch_to_parent_directory)
    nmap <buffer> o <Plug>(vimfiler_expand_or_edit)
    nmap <buffer> O <Plug>(vimfiler_open_file_in_another_vimfiler)
    nmap <buffer> w <Plug>(vimfiler_expand_tree_recursive)
    nmap <buffer> W <Plug>(vimfiler_toggle_visible_ignore_files)
    nmap <buffer> e <Plug>(vimfiler_toggle_mark_current_line)
    nmap <buffer> E <Plug>(vimfiler_toggle_mark_current_line_up)
    nmap <buffer> <expr> q winnr('$') ==# 1 ? "\<Plug>(vimfiler_hide)" : "\<Plug>(vimfiler_switch_to_other_window)"
    nmap <silent> <buffer> <expr> <Enter> vimfiler#smart_cursor_map("\<Plug>(vimfiler_expand_tree)", "\<Plug>(vimfiler_edit_file)")
    nmap <silent> <buffer> <nowait> <expr> t vimfiler#do_action('tabopen')
    nmap <silent> <buffer> <nowait> <expr> s vimfiler#do_switch_action('split')
    nmap <silent> <buffer> <nowait> <expr> S vimfiler#do_switch_action('vsplit')
    nmap <silent> <buffer> <nowait> <expr> v vimfiler#do_switch_action('vsplit')
    nmap <buffer> <nowait> n <Plug>(vimfiler_new_file)
    nmap <buffer> <nowait> N <Plug>(vimfiler_make_directory)
    nmap <buffer> <nowait> d <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_delete_file)y
    nmap <buffer> <nowait> D <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_force_delete_file)
    nmap <buffer> <nowait> c <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_copy_file)
    nmap <buffer> <nowait> m <Plug>(vimfiler_mark_current_line)<Plug>(vimfiler_move_file)y
  endfunction
'''
hook_source = '''
  let g:vimfiler_data_directory = $CACHE.'/vimfiler'
  let g:unite_kind_file_use_trashbox = IsWindows()

  let g:vimfiler_ignore_pattern =
    \ '^\%(\..*\|^.\|.git\|.hg\|var\|etc\|build\|dist\|vendor\|node_modules\|gulpfile.js\|package.json\)$'

  " Icons
  let g:vimfiler_file_icon = ' '
  let g:vimfiler_tree_leaf_icon = ''
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_marked_file_icon = '+'

  " Default profile
  let s:vimfiler_default = {
    \ 'safe': 0,
    \ 'parent': 0,
    \ 'explorer': 1,
    \ 'winwidth': 28,
    \ 'winminwidth': 18
    \}

  call vimfiler#custom#profile('default', 'context', s:vimfiler_default)
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'
on_source = ['unite.vim', 'vim-quickrun']

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
on_map = {n = '<Plug>(quickrun)'}
hook_add = '''
  nnoremap <expr> <silent> ;Q quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

  " Runners
  AutocmdFT php
    \ nnoremap <silent> <buffer> ,t :<C-u>call QuickrunType('phpunit')<CR>
  AutocmdFT javascript
    \  nnoremap <silent> <buffer> ,t :<C-u>call QuickrunType('jest')<CR>
    \| nnoremap <silent> <buffer> ,T :<C-u>call QuickrunType('nodejs')<CR>

  " Formatters
  AutocmdFT php,javascript,python,json,xml,html,twig,css,sugarss,lua,go
    \ nnoremap <silent> <buffer> ,w :<C-u>silent! undojoin<CR>:call QuickrunType('formatter')<CR>

  Autocmd BufEnter,WinEnter runner:*
    \ let &l:statusline = ' ' | setlocal nonu nornu nolist colorcolumn=

  function! QuickrunType(type) abort
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config[&filetype] = {'type': printf('%s/%s', &filetype, a:type)}
    call quickrun#run(printf('-%s', a:type))
  endfunction
'''
hook_source = 'source ~/vimfiles/dein/plugins/quickrun.vim'

[[plugins]]
repo = 'Quramy/tsuquyomi'
hook_add = '''
  let g:tsuquyomi_completion_detail = 1
  let g:tsuquyomi_disable_quickfix = 1

  set ballooneval
  AutocmdFT typescript setlocal balloonexpr=tsuquyomi#balloonexpr()
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'
